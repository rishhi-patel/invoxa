import groovy.util.Node

// Jenkinsfile for Invoxa project

pipeline {

   agent any

   stages {

       stage('Setup parameters') {

           steps {

               script {

                   String sectionHeaderStyle = '''

                   color: white;

                   background: dimgrey;

                   font-family: Roboto, sans-serif !important;

                   padding: 5px;

                   text-align: center;

                   '''

                   String separatorStyle = '''

                       border: 0;

                       border-bottom: 3px;

                       background: #999;

                   '''

                   properties([

                       parameters([

                           [

                               $class: 'ParameterSeparatorDefinition',

                               name: 'Tag_HEADER',

                               sectionHeader: 'INVOXA',

                               separatorStyle: separatorStyle,

                               sectionHeaderStyle: sectionHeaderStyle

                           ],

                           choice(

                               choices: ['dev','prd'],

                               name: 'Organization_Environment',

                               description: "Select Organization Environment"

                           ),

                           [

                               $class: 'CascadeChoiceParameter',

                               choiceType: 'PT_SINGLE_SELECT',

                               description: 'CTR Account where IAM Role will be Created',

                               filterLength: 1, filterable: false,

                               name: 'CTRAccount',

                               randomName: 'choice-parameter-01',

                               referencedParameters: 'Organization_Environment',

                               script:

                               [

                                   $class: 'GroovyScript',

                                   fallbackScript:

                                   [

                                       classpath: [],

                                       sandbox: true,

                                       script: 'return[""]'],

                                   script: [

                                       classpath: [],

                                       sandbox: true,

                                       script: '''

                                           if(Organization_Environment.equals('TST'))

                                           {

                                           return['CTRTST']

                                           }

                                           if(Organization_Environment.equals('GB'))

                                           {

                                           return['CTRGB']

                                           }

                                           else

                                           {

                                           return['NA']

                                           }    

                                               '''

                                           ]

                               ]

                           ],

                           [

                               $class: 'CascadeChoiceParameter',

                               choiceType: 'PT_SINGLE_SELECT',

                               description: 'CTR Account Number where IAM Role will be Created',

                               filterLength: 1, filterable: false,

                               name: 'CTRAccountNo',

                               randomName: 'choice-parameter-02',

                               referencedParameters: 'CTRAccount',

                               script: [

                                   $class: 'GroovyScript',

                                   fallbackScript: [

                                       classpath: [],

                                       sandbox: true,

                                       script: 'return[""]'

                                   ],

                                   script: [

                                       classpath: [],

                                       sandbox: true,

                                       script: '''

                                           if(CTRAccount.equals('CTRTST')) {

                                               return['065619428523']

                                           }

                                           else if(CTRAccount.equals('CTRGB')) {

                                               return['669630188448']

                                           }

                                           else {

                                               return['NA']

                                           }

                                       '''

                                   ]

                               ]

                           ],

                           [

                               $class: 'CascadeChoiceParameter',

                               choiceType: 'PT_SINGLE_SELECT',

                               description: 'Select Region where IAM Role will be Created',

                               filterLength: 1, filterable: false,

                               name: 'RegionName',

                               randomName: 'choice-parameter-03',

                               referencedParameters: 'CTRAccount',

                               script: [

                                   $class: 'GroovyScript',

                                   fallbackScript: [

                                       classpath: [],

                                       sandbox: true,

                                       script: 'return[""]'

                                   ],

                                   script: [

                                       classpath: [],

                                       sandbox: true,

                                       script: '''

                                           if(CTRAccount.equals('CTRTST') || CTRAccount.equals('CTRGB')) {

                                               return['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ap-south-1', 'ap-northeast-3', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-northeast-1', 'ca-central-1', 'eu-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-north-1', 'sa-east-1']

                                           }

                                           else {

                                               return['NA']

                                           }    

                                       '''

                                   ]

                               ]

                           ],

 

                           [

                               $class: 'ParameterSeparatorDefinition',

                               name: 'Tag_HEADER',

                               sectionHeader: 'Tag Details',

                               separatorStyle: separatorStyle,

                               sectionHeaderStyle: sectionHeaderStyle

                           ],

                           string(

                               name: 'ClarityID',

                               defaultValue: '',

                               description: 'Enter ClarityID'

                           ),

                           string(

                               name: 'BillingContact',

                               defaultValue: '',

                               description: 'Enter BillingContact Details'

                           ),

                           string(

                               name: 'Owner',

                               defaultValue: '',

                               description: 'Enter Owner Details'

                           ),

                           string(

                               name: 'ITCHG',

                               defaultValue: '',

                               description: 'Enter ITCHG or RITM Number'

                           )

                       ])

                   ])

               }

           }

       }

 

       stage('Assume AWS Role') {

           steps {

               script {

                   // role assume

                   def assumeRole = { roleArn, sessionName ->

                       def assumeRoleOutput = sh(

                           script: """

                               aws sts assume-role --role-arn ${roleArn} --role-session-name ${sessionName} --output json

 

                           """,

                           returnStdout: true

                       ).trim()

 

                       def json = readJSON text: assumeRoleOutput

                       return [

                           accessKey: json.Credentials.AccessKeyId,

                           secretKey: json.Credentials.SecretAccessKey,

                           sessionToken: json.Credentials.SessionToken

                       ]

                   }

 

                   // Assuming IAM Roles based On Organization Environment

                   if (params.CTRAccount == 'CTRTST') {

                       def role1 = assumeRole("arn:aws:iam::304512965277:role/RCC_AWS_AUTOTST_ADM", "autotst-jenkins-session")

                       env.AWS_ACCESS_KEY_ID = role1.accessKey

                       env.AWS_SECRET_ACCESS_KEY = role1.secretKey

                       env.AWS_SESSION_TOKEN = role1.sessionToken

                      

 

                       def role2 = assumeRole("arn:aws:iam::900804374729:role/RRCCTST_AWS_AUTOTST_ADM", "rcctst-autotst-session")

                       env.AWS_ACCESS_KEY_ID = role2.accessKey

                       env.AWS_SECRET_ACCESS_KEY = role2.secretKey

                       env.AWS_SESSION_TOKEN = role2.sessionToken

                      

 

                       def role3 = assumeRole("arn:aws:iam::065619428523:role/RCTRTST_AWS_AUTOTST_ADM", "ctrtst-autotst-session")

                       env.AWS_ACCESS_KEY_ID = role3.accessKey

                       env.AWS_SECRET_ACCESS_KEY = role3.secretKey

                       env.AWS_SESSION_TOKEN = role3.sessionToken  

 

                       //CTRGB ASSUME ROLE                

 

                   } /*else if (params.CTRAccount == 'CTRGB') {

                       def role1 = assumeRole("arn:aws:iam::304512965277:role/RCC_AWS_AUTO_ADM", "autotst-devjenkins-session")

                       env.AWS_ACCESS_KEY_ID = role1.accessKey

                       env.AWS_SECRET_ACCESS_KEY = role1.secretKey

                       env.AWS_SESSION_TOKEN = role1.sessionToken

 

                       def role2 = assumeRole("arn:aws:iam::669630188448:role/RCTR_AWS_AUTO_ADM", "ctrgb-autotst-session")

                       env.AWS_ACCESS_KEY_ID = role2.accessKey

                       env.AWS_SECRET_ACCESS_KEY = role2.secretKey

                       env.AWS_SESSION_TOKEN = role2.sessionToken

 

                   } */else {

                       error "Unsupported Organization Environment: ${params.Organization_Environment}"

                   }

               }

           }

       }

 

      

 

       stage('CloudFormation Stack Deployment') {

           steps {

               script {

                   // Define static stack name, region, template file path, and parameters file path

                   def stackName = "VEGA-CTR-IAM-ROLE-STACK"

                   def templateFile = "s3/s3_cloudtrail_vegarole/template.json"

                   def paramsFile = "s3/s3_cloudtrail_vegarole/params.json"

                   def region = "us-east-1" // Assuming a static region for the role creation.

 

                   echo "Starting CloudFormation deployment for IAM Role with the following details:"

                   echo "  - Stack Name: ${stackName}"

                   echo "  - Region: ${region}"

                   echo "  - Template File: ${templateFile}"

                   echo "  - Parameters File: ${paramsFile}"

 

                   // Execute AWS CLI command to create the IAM Role stack

                   sh """

                       aws cloudformation create-stack \

                           --stack-name ${stackName} \

                           --region ${region} \

                           --template-body file://${templateFile} \

                           --parameters file://${paramsFile} \

                           --capabilities CAPABILITY_NAMED_IAM

 

                       echo "CloudFormation stack '${stackName}' created successfully in region '${region}'."

                   """

               }

           }

       }  

   }

 

   post {

       success {

           echo 'Pipeline executed successfully!'

       }

       failure {

           echo 'Pipeline failed. Please check the logs for more details.'

       }

   }

}